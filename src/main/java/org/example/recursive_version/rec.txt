package org.example.recursive_version;

import org.example.Constants;
import org.example.Island;

import java.util.*;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class IslandParallel extends Island {

    private final ForkJoinPool pool;

    public IslandParallel(int[][] graph) {
        super(graph);
        this.pool = new ForkJoinPool();
        initializePopulation();
    }

    @Override
    protected List<List<Integer>> createPopulationList() {
        return new ArrayList<>();
    }

    @Override
    protected Map<List<Integer>, Integer> createFitnessCacheMap() {
        return new HashMap<>();
    }

    protected void initializePopulation() {
        List<RecursiveAction> tasks = IntStream.range(0, Constants.POPULATION_SIZE)
                .mapToObj(i -> new RecursiveAction() {
                    @Override
                    protected void compute() {
                        List<Integer> path = generateRandomPath();
                        if (isValidPath(path)) {
                            synchronized (population) {
                                population.add(path);
                            }
                        }
                    }
                })
                .collect(Collectors.toList());

        tasks.forEach(pool::invoke);
    }

    @Override
    public void evolve() {
        List<List<Integer>> nextGeneration = new ArrayList<>(population.size());
        evaluatePopulationParallel();

        List<RecursiveAction> evolutionTasks = IntStream.range(0, population.size())
                .mapToObj(i -> new RecursiveAction() {
                    @Override
                    protected void compute() {
                        List<Integer> parent1 = tournamentSelection();
                        List<Integer> parent2 = tournamentSelection();
                        List<Integer> child = crossover(parent1, parent2);
                        mutate(child);
                        List<Integer> individualToAdd = isValidPath(child) ? child : new ArrayList<>(parent1);
                        synchronized (nextGeneration) {
                            nextGeneration.add(individualToAdd);
                        }
                    }
                })
                .collect(Collectors.toList());

        evolutionTasks.forEach(pool::invoke);

        population.clear();
        population.addAll(nextGeneration);
    }

    private void evaluatePopulationParallel() {
        List<RecursiveAction> tasks = population.stream()
                .map(individual -> new RecursiveAction() {
                    @Override
                    protected void compute() {
                        calculateFitness(individual);
                    }
                })
                .collect(Collectors.toList());
        tasks.forEach(pool::invoke);
    }

    private class FitnessCalculationTask extends RecursiveAction {
        private final List<Integer> path;

        public FitnessCalculationTask(List<Integer> path) {
            this.path = Collections.unmodifiableList(path);
        }

        @Override
        protected void compute() {
            calculateFitness(path);
        }
    }

    public List<List<Integer>> getBestIndividuals(int count) {
        return population.stream()
                .sorted(Comparator.comparingInt(this::calculateFitness))
                .limit(count)
                .map(ArrayList::new)
                .collect(Collectors.toList());
    }

    @Override
    public void addMigrants(List<List<Integer>> migrants) {
        migrants.forEach(migrant -> {
            int index = random.nextInt(population.size());
            population.set(index, new ArrayList<>(migrant));
        });
    }
}


package org.example.recursive_version;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;

import static org.example.Constants.*;

public class ShortestPathGAIslandParallel {
    private final int[][] graph;

    public ShortestPathGAIslandParallel(int[][] graph) {
        this.graph = graph;
    }

    public List<Integer> findShortestPathParallel() {
        int threadsNum = NUM_ISLANDS*2;
        List<IslandParallel> islands = new ArrayList<>(NUM_ISLANDS);
        ExecutorService islandExecutor = Executors.newFixedThreadPool(threadsNum);

        // Паралельна ініціалізація островів
        List<java.util.concurrent.Future<?>> islandFutures = IntStream.range(0, NUM_ISLANDS)
                .mapToObj(i -> islandExecutor.submit(() -> islands.add(new IslandParallel(graph))))
                .collect(java.util.stream.Collectors.toList());

        for (java.util.concurrent.Future<?> future : islandFutures) {
            try {
                future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Еволюція поколінь
        for (int gen = 0; gen < GENERATIONS; gen++) {
            List<java.util.concurrent.Future<?>> evolutionFutures = new ArrayList<>();
            for (IslandParallel island : islands) {
                evolutionFutures.add(islandExecutor.submit(island::evolve));
            }

            // Очікування завершення еволюції на всіх островах
            for (java.util.concurrent.Future<?> future : evolutionFutures) {
                try {
                    future.get();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (gen > 0 && gen % MIGRATION_INTERVAL == 0) {
                migrate(islands);
            }
        }

        islandExecutor.shutdown();
        try {
            islandExecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // Знаходимо найкращий шлях серед усіх островів
        return islands.stream()
                .map(IslandParallel::getBestPath)
                .filter(Objects::nonNull)
                .min(Comparator.comparingInt(p -> calculateFitness(p, graph)))
                .orElse(null);
    }

    private void migrate(List<IslandParallel> islands) {
        for (int i = 0; i < islands.size(); i++) {
            IslandParallel source = islands.get(i);
            IslandParallel target = islands.get((i + 1) % islands.size());

            List<List<Integer>> migrants = source.getBestIndividuals(MIGRATION_COUNT);
            target.addMigrants(migrants);
        }
    }

    public static List<Integer> run(int[][] graph) {
        ShortestPathGAIslandParallel ga = new ShortestPathGAIslandParallel(graph);
        List<Integer> shortestPath = ga.findShortestPathParallel();

        System.out.println("Fitness (Parallel): " + ga.calculateFitness(shortestPath, graph));
        System.out.println("Shortest path (Parallel): " + shortestPath);
        return shortestPath;
    }

    private int calculateFitness(List<Integer> path, int[][] graph) {
        if (path == null) return Integer.MAX_VALUE;

        int fitness = 0;
        for (int i = 0; i < path.size() - 1; i++) {
            fitness += graph[path.get(i)][path.get(i + 1)];
        }
        return fitness;
    }
}