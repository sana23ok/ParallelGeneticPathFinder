package org.example.parallel.finalVersion;

import org.example.Island;

import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.example.Constants.*;

public class IslandParallel extends Island {

    private final ForkJoinPool pool;

    public IslandParallel(int[][] graph, ForkJoinPool pool) {
        super(graph);
        this.pool = pool;
    }

    @Override
    protected List<List<Integer>> createPopulationList() {
        return new CopyOnWriteArrayList<>();
    }

    @Override
    protected Map<List<Integer>, Integer> createFitnessCacheMap() {
        return new ConcurrentHashMap<>();
    }

    @Override
    protected void initializePopulation() {
        try {
            pool.submit(() ->
                    IntStream.range(0, POPULATION_SIZE).parallel().forEach(i -> {
                        while (true) {
                            List<Integer> path = generateRandomPath();
                            if (isValidPath(path)) {
                                population.add(path);
                                break;
                            }
                        }
                    })
            ).get();
        } catch (InterruptedException | ExecutionException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("initializePopulation failed", e);
        }
    }

    @Override
    public void evolve() {
        List<List<Integer>> nextGeneration = new CopyOnWriteArrayList<>();

        evaluatePopulation();

        try {
            pool.submit(() ->
                    IntStream.range(0, population.size()).parallel().forEach(i -> {
                        List<Integer> parent1 = tournamentSelection();
                        List<Integer> parent2 = tournamentSelection();
                        List<Integer> child = crossover(parent1, parent2);
                        mutate(child);
                        if (isValidPath(child)) {
                            nextGeneration.add(child);
                        } else {
                            nextGeneration.add(parent1);
                        }
                    })
            ).get();
        } catch (InterruptedException | ExecutionException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("evolve failed", e);
        }

        synchronized (population) {
            population.clear();
            population.addAll(nextGeneration);
        }
    }

    @Override
    protected void evaluatePopulation() {
        try {
            pool.submit(() -> population.parallelStream().forEach(this::calculateFitness)).get();
        } catch (InterruptedException | ExecutionException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("evaluatePopulation failed", e);
        }
    }

    @Override
    protected List<Integer> tournamentSelection() {
        // tournamentSelection itself is single-threaded, so no change
        return IntStream.range(0, TOURNAMENT_SIZE)
                .mapToObj(i -> population.get(random.nextInt(population.size())))
                .min(Comparator.comparingInt(this::calculateFitness))
                .orElse(population.get(0));
    }

    public List<List<Integer>> getBestIndividuals(int count) {
        try {
            return pool.submit(() ->
                    population.stream()
                            .sorted(Comparator.comparingInt(this::calculateFitness))
                            .limit(count)
                            .collect(Collectors.toList())
            ).get();
        } catch (InterruptedException | ExecutionException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("getBestIndividuals failed", e);
        }
    }

    public void addMigrants(List<List<Integer>> migrants) {
        for (List<Integer> migrant : migrants) {
            int index = random.nextInt(population.size());
            population.set(index, migrant);
        }
    }
}


package org.example.parallel.finalVersion;

import org.example.Constants;
import org.example.graph.GraphVisualizer;
import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.example.Constants.*;

class ParallelExecutor {
    public static void runInCustomPool(ForkJoinPool pool, Runnable task) {
        try {
            pool.submit(task).get(); // wait for completion
        } catch (InterruptedException | ExecutionException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Parallel execution failed", e);
        }
    }
}


public class ShortestPathGAIslandParallel {

    private final int[][] graph;
    private final ForkJoinPool forkJoinPool;
    private List<IslandParallel> islands;

    // Конструктор, який приймає існуючий ForkJoinPool
    public ShortestPathGAIslandParallel(int[][] graph, ForkJoinPool forkJoinPool) {
        this.graph = graph;
        this.forkJoinPool = forkJoinPool;
        this.islands = IntStream.range(0, Constants.NUM_ISLANDS)
                .mapToObj(i -> new IslandParallel(graph, this.forkJoinPool))
                .collect(java.util.stream.Collectors.toList());

        // Ініціалізація популяції одразу після створення островів
        ParallelExecutor.runInCustomPool(forkJoinPool, () ->
                islands.parallelStream().forEach(IslandParallel::initializePopulation)
        );
    }

    // Конструктор за замовчуванням (використовує NUM_ISLANDS*2 потоків)
    public ShortestPathGAIslandParallel(int[][] graph) {
        this(graph, new ForkJoinPool(NUM_ISLANDS*2));
    }

    public List<Integer> findShortestPath() {
        for (int gen = 0; gen < GENERATIONS; gen++) {

            ParallelExecutor.runInCustomPool(forkJoinPool, () ->
                    islands.parallelStream().forEach(IslandParallel::evolve)
            );

            if (gen > 0 && gen % MIGRATION_INTERVAL == 0) {
                migrateIslands();
            }
        }

        forkJoinPool.shutdown();

        return islands.stream()
                .map(IslandParallel::getBestPath)
                .min(Comparator.comparingInt(p -> calculateFitness(p, graph)))
                .orElse(null);
    }

    private void migrateIslands() {
        List<List<List<Integer>>> migrantsList = IntStream.range(0, islands.size())
                .mapToObj(i -> islands.get(i).getBestIndividuals(MIGRATION_COUNT))
                .collect(Collectors.toList());

        for (int i = 0; i < islands.size(); i++) {
            IslandParallel target = islands.get((i + 1) % islands.size());
            target.addMigrants(migrantsList.get(i));
        }
    }

    private int calculateFitness(List<Integer> path, int[][] graph) {
        int fitness = 0;
        for (int i = 0; i < path.size() - 1; i++) {
            fitness += graph[path.get(i)][path.get(i + 1)];
        }
        return fitness;
    }

    // Оновлений статичний метод run, який приймає кількість потоків
    public static List<Integer> run(int[][] graph, int numThreads) {
        ForkJoinPool customPool = new ForkJoinPool(numThreads);
        ShortestPathGAIslandParallel ga = new ShortestPathGAIslandParallel(graph, customPool);
        List<Integer> shortestPath = ga.findShortestPath();
        customPool.shutdown(); // Важливо вимкнути пул після використання

        System.out.println("Fitness (threads: " + numThreads + "): " + ga.calculateFitness(shortestPath, graph));
        System.out.println("Shortest path (threads: " + numThreads + "): " + shortestPath);

        if (NUM_NODES <= 20) {
            GraphVisualizer visualizer = new GraphVisualizer(graph);
            visualizer.showGraph(shortestPath);
        }
        return shortestPath;
    }

    // Залишаємо існуючий статичний метод run для сумісності (використовує NUM_ISLANDS потоків)
    public static List<Integer> run(int[][] graph) {
        return run(graph, NUM_ISLANDS);
    }
}